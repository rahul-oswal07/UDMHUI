/*
  AUTHOR: AMIT KUMAR SINGH
  PROJECT: PHOENIX
  CREATION DATE: 02-JUL-2015
  DESCRIPTION: THIS SQL CODE IS USED TO CREATE SSIS FRAMEWORK SPS MENTIONED BELOW:
  (LOGPACKAGESTART,
   LOGPACKAGEEND,
   LOGPACKAGEERROR,


  )

  REVISION HISTORY:
 -----------------------------------------------------------------------------------------------------
  VERSION    	DATE        	DEVELOPER         		DESCRIPTION
 -----------------------------------------------------------------------------------------------------
    1.0         02-JUL-2015		AMIT					INITIAL DRAFT    
 -----------------------------------------------------------------------------------------------------
 */

USE [$(VARDBNAME)]
GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[LOGPACKAGESTART]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[LOGPACKAGESTART]
GO
CREATE PROCEDURE [DBO].[LOGPACKAGESTART]
(    @BATCHLOGID INT
    ,@PACKAGENAME VARCHAR(100) 
    ,@EXECUTIONINSTANCEID UNIQUEIDENTIFIER 
    ,@MACHINENAME VARCHAR(64) 
    ,@USERNAME VARCHAR(64) 
    ,@STARTDATETIME DATETIME 
    ,@PACKAGEVERSIONGUID UNIQUEIDENTIFIER 
    ,@VERSIONMAJOR INT 
    ,@VERSIONMINOR INT 
    ,@VERSIONBUILD INT 
    ,@VERSIONCOMMENT VARCHAR(1000) 
    ,@PACKAGEGUID UNIQUEIDENTIFIER 
    ,@CREATIONDATE DATETIME 
    ,@CREATEDBY VARCHAR(255) 
    ,@CHUNKNUMBER VARCHAR(2)
)

AS
BEGIN
SET NOCOUNT ON

DECLARE @PACKAGEID INT
,@PACKAGEVERSIONID INT 
,@PACKAGELOGID INT
,@ENDBATCHAUDIT BIT
DECLARE @ACKFILEPATH VARCHAR(255),
		@BATCHFILEPATH VARCHAR(255),
		@ACKFILENAME VARCHAR(100),
		@FILE_NAME VARCHAR(100),
		@TYPE VARCHAR(20),
		@COMMAND_STR VARCHAR(2000),
		@ISACKGEN BIT, /* THIS TO GENE ACK FILE EXCEPT FOR SEGMENT PACKAGES*/
		@BASEACKFILENAME VARCHAR(100), /* TO HOLD BASK ACK FILE NAME */
		@SOURCEFILENAME VARCHAR(100) /* TO HOLD SOURCE FILE NAME */
		--@PACKAGE_NAME_SEG01 VARCHAR(50)/* TO HOLD PACAKGE NAME FROM WS TRANCH TABLE */ 
		

/* INITIALIZE VARIABLES */
SELECT @ENDBATCHAUDIT = 0, @ISACKGEN=0

/* GET PACKAGE METADATA ID */
IF NOT EXISTS (SELECT 1 FROM DBO.PACKAGE WHERE PACKAGEGUID = @PACKAGEGUID AND PACKAGENAME = @PACKAGENAME)
BEGIN
    INSERT INTO DBO.PACKAGE (PACKAGEGUID, PACKAGENAME, CREATIONDATE, CREATEDBY, CHUNKNUMBER)
        VALUES (@PACKAGEGUID, @PACKAGENAME, @CREATIONDATE, @CREATEDBY,@CHUNKNUMBER)
END

SELECT @PACKAGEID = PACKAGEID
    FROM DBO.PACKAGE 
    WHERE PACKAGEGUID = @PACKAGEGUID
    AND PACKAGENAME = @PACKAGENAME

/* GET PACKAGE VERSION METADATA ID */
IF NOT EXISTS (SELECT 1 FROM DBO.PACKAGEVERSION WHERE PACKAGEVERSIONGUID = @PACKAGEVERSIONGUID)
BEGIN
    INSERT INTO DBO.PACKAGEVERSION (PACKAGEID, PACKAGEVERSIONGUID, VERSIONMAJOR, VERSIONMINOR, VERSIONBUILD, VERSIONCOMMENT)
        VALUES (@PACKAGEID, @PACKAGEVERSIONGUID, @VERSIONMAJOR, @VERSIONMINOR, @VERSIONBUILD, @VERSIONCOMMENT)
END
SELECT @PACKAGEVERSIONID = PACKAGEVERSIONID
    FROM DBO.PACKAGEVERSION 
    WHERE PACKAGEVERSIONGUID = @PACKAGEVERSIONGUID

/* GET BATCHLOGID */
IF ISNULL(@BATCHLOGID,0) = 0
BEGIN
    INSERT INTO DBO.BATCHLOG (STARTDATETIME, [STATUS])
        VALUES (@STARTDATETIME, 'R')
    SELECT @BATCHLOGID = SCOPE_IDENTITY()
    SELECT @ENDBATCHAUDIT = 1
END

/* CREATE PACKAGELOG RECORD */
INSERT INTO DBO.PACKAGELOG (BATCHLOGID, PACKAGEVERSIONID, EXECUTIONINSTANCEID, MACHINENAME, USERNAME, STARTDATETIME, [STATUS])
    VALUES(@BATCHLOGID, @PACKAGEVERSIONID, @EXECUTIONINSTANCEID, @MACHINENAME, @USERNAME, @STARTDATETIME, 'R')

SELECT @PACKAGELOGID = SCOPE_IDENTITY()
SELECT @BATCHLOGID AS BATCHLOGID, @PACKAGELOGID AS PACKAGELOGID, @ENDBATCHAUDIT AS ENDBATCHAUDIT

--GENERATE ACK FILE SCRIPT
	--GET THE WS TRACNHE TABLE INFORMATION LIKE ACKFILEPATH, BATCHFILEPATH, BASEACKFILENAME AND PACKAGE_NAME_SEG01
	SELECT @ACKFILEPATH =[ACK_FILEPATH], @BATCHFILEPATH = [WS_BATCHFILEPATH]  ,@BASEACKFILENAME =[WS_BASE_ACK_FILENAME]--,@PACKAGE_NAME_SEG01=[WS-SEG01-PKG_NAME]
					FROM DBO.TB_UDMH_CTL_TEMP
		
	IF  UPPER (SUBSTRING (@PACKAGENAME,1,6)) <> 'PKG_PX' -- CHECK WHETHERE IT IS NOT "SOURCE' TYPE
		BEGIN
			
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_TST
					WHERE PACKAGE_NAME = @PACKAGENAME
					AND CHUNK_NUMBER   = @CHUNKNUMBER	;
				
			SET @ISACKGEN=1;						
		END	
	
	ELSE IF  UPPER(@PACKAGENAME) IN('PKG_PX_CTL_START','PKG_PX_CTL_END') -- CHECK WHETHER IT IS "CONTROL" TYPE
		BEGIN
			SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
				FROM DBO.TB_UDMH_SDMT
				WHERE PACKAGE_NAME = @PACKAGENAME ;	
			SET @ISACKGEN=1;	
		END							

	--GENERATE ACK FILE AND INVOKE BATCH FILE
	IF (@ISACKGEN=1)
		BEGIN
			SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME /* TO GET THE COMPLETE ACK FILENAME */
			EXECUTE SPWRITESTRINGTOFILE 'START                         ', @ACKFILEPATH, @ACKFILENAME 
			SELECT @ACKFILEPATH =  CASE WHEN (RIGHT(@ACKFILEPATH,1) = '\') THEN SUBSTRING(@ACKFILEPATH,1,LEN(@ACKFILEPATH)-1 )
										ELSE @ACKFILEPATH  
								   END  	
			SET @COMMAND_STR = @BATCHFILEPATH+' '+@ACKFILEPATH+ '\'+@ACKFILENAME
			EXEC SYS.XP_CMDSHELL  @COMMAND_STR    --POWERSHELL
		END
		
	
END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[LOGPACKAGEEND]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[LOGPACKAGEEND]
GO
CREATE PROCEDURE [DBO].[LOGPACKAGEEND]
(    @PACKAGELOGID INT
    ,@BATCHLOGID INT
    ,@ENDBATCHAUDIT BIT
    ,@CHUNKNUMBER VARCHAR(2)
    ,@PACKAGENAME VARCHAR(100)    
)
AS
DECLARE @ACKFILEPATH VARCHAR(255),
		@BATCHFILEPATH VARCHAR(255),
		@ACKFILENAME VARCHAR(100),
		@FILE_NAME VARCHAR(100),
		@TYPE VARCHAR(20),
		@COMMAND_STR VARCHAR(2000),
		--,@PACKAGENAME VARCHAR(50)
		--,@CHUNKNUMBER VARCHAR(2) = '01';
		@BASEACKFILENAME VARCHAR(50), /* TO HOLD BASK ACK FILE NAME */
		@SOURCEFILENAME VARCHAR(50),/* TO HOLD SOURCE FILE NAME */
		@PACKAGE_NAME_SEG01 VARCHAR(50);/* TO HOLD PACAKGE NAME FROM WS TRANCH TABLE */ 
	
BEGIN
    SET NOCOUNT ON
    UPDATE DBO.PACKAGELOG
        SET STATUS = 'S'
        , ENDDATETIME = GETDATE()
        WHERE PACKAGELOGID = @PACKAGELOGID

    IF @ENDBATCHAUDIT = 1
    BEGIN
        UPDATE DBO.BATCHLOG
        SET STATUS = 'S'
        , ENDDATETIME = GETDATE()
        WHERE BATCHLOGID = @BATCHLOGID
    END
--GENERATE ACK FILE SCRIPT
    --GET THE WS TRACNHE TABLE INFORMATION LIKE ACKFILEPATH, BATCHFILEPATH, BASEACKFILENAME AND PACKAGE_NAME_SEG01
	SELECT @ACKFILEPATH =[ACK_FILEPATH], @BATCHFILEPATH = [WS_BATCHFILEPATH]  ,@BASEACKFILENAME =[WS_BASE_ACK_FILENAME]--,@PACKAGE_NAME_SEG01=[WS-SEG01-PKG_NAME]
					FROM DBO.TB_UDMH_CTL_TEMP
	

	IF  UPPER (SUBSTRING ( @PACKAGENAME,1,6)) = 'PKG_PX' -- CHECK WHETHERE IT IS  "SOURCE' TYPE
		BEGIN
			IF  UPPER(@PACKAGENAME) IN ('PKG_PX_CTL_START','PKG_PX_CTL_END') -- NO CHUNNK NUM FOR CONTROL FILE			
				BEGIN	
					SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
						FROM DBO.TB_UDMH_SDMT
						WHERE PACKAGE_NAME = @PACKAGENAME;
					SELECT @ACKFILENAME = REPLACE(@ACKFILENAME, '.STA', '.END')
				END
			ELSE --FOR OTHER SOURCE PACKAGES				
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_SDMT
					WHERE PACKAGE_NAME = @PACKAGENAME
					AND CHUNK_NUMBER   = @CHUNKNUMBER;
			
			SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME
			EXECUTE SPWRITESTRINGTOFILE 'OK                            ', @ACKFILEPATH, @ACKFILENAME 
		
		END	
	
	ELSE  -- ELSE IT IS OF TYPE INCLUDING CASCADE , GENERATE, TRANSFORMATION.
		BEGIN
		
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_TST
					WHERE PACKAGE_NAME = @PACKAGENAME
					AND CHUNK_NUMBER   = @CHUNKNUMBER;
			
				
			SELECT @ACKFILENAME = REPLACE(@ACKFILENAME, '.STA', '.END')
			SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME
			EXECUTE SPWRITESTRINGTOFILE 'OK                            ', @ACKFILEPATH, @ACKFILENAME 
		END
	
	--  THE BATCHFILE EXECUTION
	BEGIN
		SELECT @ACKFILEPATH =  CASE WHEN (RIGHT(@ACKFILEPATH,1) = '\') THEN SUBSTRING(@ACKFILEPATH,1,LEN(@ACKFILEPATH)-1 )
					 ELSE @ACKFILEPATH  END 		
		SET @COMMAND_STR = @BATCHFILEPATH+' '+@ACKFILEPATH+ '\'+@ACKFILENAME
		EXEC SYS.XP_CMDSHELL  @COMMAND_STR    --POWERSHELL			
	END
		
END 

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[LOGPACKAGEERROR]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[LOGPACKAGEERROR]
GO
CREATE PROCEDURE [DBO].[LOGPACKAGEERROR]
(    @PACKAGELOGID INT
    ,@BATCHLOGID INT
    ,@SOURCENAME VARCHAR(64)
    ,@SOURCEID UNIQUEIDENTIFIER
    ,@ERRORCODE INT
    ,@ERRORDESCRIPTION VARCHAR(2000)
    ,@ENDBATCHAUDIT BIT
    ,@CHUNKNUMBER VARCHAR(2)
    ,@PACKAGENAME VARCHAR(35)
)

AS
DECLARE @ACKFILEPATH VARCHAR(255),
		@BATCHFILEPATH VARCHAR(255),
		@ACKFILENAME VARCHAR(50),
		@FILE_NAME VARCHAR(50),
		@TYPE VARCHAR(20),
		@COMMAND_STR VARCHAR(2000),
		--,@PACKAGENAME AS VARCHAR(75)
		@BASEACKFILENAME VARCHAR(50), /* TO HOLD BASK ACK FILE NAME */
		@SOURCEFILENAME VARCHAR(50) /* TO HOLD SOURCE FILE NAME */
		--@PACKAGE_NAME_SEG01 VARCHAR(50)/* TO HOLD PACAKGE NAME FROM WS TRANCH TABLE */ 
		
BEGIN
    SET NOCOUNT ON
    INSERT INTO DBO.PACKAGEERRORLOG (PACKAGELOGID, SOURCENAME, SOURCEID, ERRORCODE, ERRORDESCRIPTION, LOGDATETIME)
    VALUES (@PACKAGELOGID, @SOURCENAME, @SOURCEID, @ERRORCODE, @ERRORDESCRIPTION, GETDATE())

    UPDATE DBO.PACKAGELOG
        SET STATUS = 'F'
            , ENDDATETIME = GETDATE()
        WHERE PACKAGELOGID = @PACKAGELOGID

    IF @ENDBATCHAUDIT = 1
    BEGIN
    UPDATE DBO.BATCHLOG
        SET STATUS = 'F'
        , ENDDATETIME = GETDATE()
        WHERE BATCHLOGID = @BATCHLOGID
    END
    
--GENERATE ACK FILE SCRIPT
    --GET THE WS TRACNHE TABLE INFORMATION LIKE ACKFILEPATH, BATCHFILEPATH, BASEACKFILENAME AND PACKAGE_NAME_SEG01
    SELECT @ACKFILEPATH =[ACK_FILEPATH], @BATCHFILEPATH = [WS_BATCHFILEPATH]  ,@BASEACKFILENAME =[WS_BASE_ACK_FILENAME]--,@PACKAGE_NAME_SEG01=[WS-SEG01-PKG_NAME]
					FROM DBO.TB_UDMH_CTL_TEMP

						
	IF  UPPER (SUBSTRING ( @PACKAGENAME,1,6)) = 'PKG_PX' -- CHECK WHETHERE IT IS  "SOURCE' TYPE
		BEGIN
			IF  UPPER(@PACKAGENAME) IN ('PKG_PX_CTL_START','PKG_PX_CTL_END')  -- NO CHUNNK NUM FOR CONTROL FILE
			BEGIN
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_SDMT
					WHERE PACKAGE_NAME = @PACKAGENAME;
				SELECT @ACKFILENAME = REPLACE(@ACKFILENAME, '.STA', '.END')
			END
			ELSE --FOR OTHER SOURCE PACKAGES				
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_SDMT
					WHERE PACKAGE_NAME = @PACKAGENAME
					AND CHUNK_NUMBER   = @CHUNKNUMBER;
				
		
	SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME /* TO GET THE COMPLETE ACK FILENAME */
			EXECUTE SPWRITESTRINGTOFILE 'ERROR                         ', @ACKFILEPATH, @ACKFILENAME 
		
		END	
	
	ELSE  -- ELSE IT IS OF TYPE INCLUDING CASCADE , GENERATE, TRANSFORMATION.
	
		BEGIN
		
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_TST
					WHERE PACKAGE_NAME = @PACKAGENAME
					AND CHUNK_NUMBER   = @CHUNKNUMBER	;
					
			SELECT @ACKFILENAME = REPLACE(@ACKFILENAME, '.STA', '.END')
			SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME /* TO GET THE COMPLETE ACK FILENAME */
			EXECUTE SPWRITESTRINGTOFILE 'ERROR                         ', @ACKFILEPATH, @ACKFILENAME 
		END
	
	--  THE BATCHFILE EXECUTION
	BEGIN	
	SELECT @ACKFILEPATH =  CASE WHEN (RIGHT(@ACKFILEPATH,1) = '\') THEN SUBSTRING(@ACKFILEPATH,1,LEN(@ACKFILEPATH)-1 )
					 ELSE @ACKFILEPATH  END 	
		SET @COMMAND_STR = @BATCHFILEPATH+' '+@ACKFILEPATH+ '\'+@ACKFILENAME
		EXEC SYS.XP_CMDSHELL  @COMMAND_STR    --POWERSHELL			
	END
	
END 

GO

