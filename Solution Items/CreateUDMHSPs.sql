/*
  AUTHOR: AMIT KUMAR SINGH
  PROJECT: PHOENIX
  CREATION DATE: 02-JUL-2015
  DESCRIPTION: THIS SQL CODE IS USED TO CREATE UDMH SPS MENTIONED BELOW:
  (
  PR_UDMH_SDM_CHECK_FILE_PACKAGE,
  PR_UDMH_STM_GET_DATA_LOADQUEUE,
  PR_UDMH_STM_NUM_PKG_PROGRESS,
  PR_UDMH_TCWS_CHECKCONTROL_FILE,
  PR_UDMH_STM_UPDATE_LQ,
  PR_UDMH_STATS_INSERT_LQ,
  PR_UDMH_TCWS_GETCHUNKTOSTART,
  PR_UDMH_TSA_LOADQUEUE_INSERT,
  PR_UDMH_TSA_LOADQUEUE_TSPACKAGE,
  PR_UDMH_ACK_FILEGEN,
  PR_UDMH_CTL_GEN,
  PR_UDMH_TCWS_OPGENSTS,
  PR_UDMH_SDM_CHK_SEGMENT,
  PR_UDMH_TCWS_CREATETWOLINKSERVER,
  PR_UDMH_TSA_TARGETCNT_CMP,
  PR_UDMH_STM_CHK_CASCADE_PKG_CMP,
  PR_UDMH_EXCEPTION_INSERT,
  PR_UDMH_EXCEPTION_INSERT_SYSTEM,
  PR_UDMH_AUDIT_INSERT,
  SPWRITESTRINGTOFILE,
  PR_UDMH_PKG_STATUS_SUCCESS,
  PR_UDMH_PKG_STATUS_FAILURE,
  PR_UDMH_PKG_STATUS_INPROGRESS,
  PR_UDMH_DELETE,
  PR_UDMH_TSA_INSERT_CHECKSUM,
  PR_UDMH_MERGE_APP
  )

  REVISION HISTORY:
 -----------------------------------------------------------------------------------------------------
  VERSION    	DATE        	DEVELOPER         		DESCRIPTION
 -----------------------------------------------------------------------------------------------------
	1.0         02-JUL-2015		AMIT					INITIAL DRAFT   
	2.0         29-JULY-2015	AMIT					SINCE X03 IS NOT APPLICABLE FOR PHOENIX, COMMENTED X03 RELATED OBJECTS 
 -----------------------------------------------------------------------------------------------------
 */

USE [$(VARDBNAME)]
GO

GO
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_MERGE_APP]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_MERGE_APP]
GO

CREATE PROCEDURE [dbo].[PR_UDMH_MERGE_APP]
AS
BEGIN
INSERT INTO TB_SRC_APP
SELECT
A.A114110,
A.A116154,
A.A116155,
A.A116156,
A.A116157,
A.A11664,
A.A12144,
A.A12148,
A.A12149,
A.A12150,
A.A12188,
A.A12189,
A.A122135,
A.A122150,
A.A122177,
A.A122178,
A.A122179,
A.A122194,
A.A123139,
A.A123161,
A.A1237,
A.A12372,
A.A1238,
A.A12398,
A.A12399,
A.A12410,
A.A12424,
A.A12425,
A.A12426,
A.A12455,
A.A12495,
A.A12496,
A.A125123,
A.A125136,
A.A125188,
A.A125193,
A.A12543,
A.A12568,
A.A126127,
A.A126128,
A.A126129,
A.A126130,
A.A126131,
A.A126137,
A.A126138,
A.A126143,
A.A126144,
A.A126145,
A.A126198,
A.A126199,
A.A1263,
A.A1264,
A.A1265,
A.A12656,
A.A131114,
A.A131115,
A.A131151,
A.A131182,
A.A13138,
A.A13186,
A.A132125,
A.A132146,
A.A1339,
A.A136159,
A.A136192,
A.A136212,
A.A13633,
A.A13676,
A.A14017,
A.A141162,
A.A14179,
A.A14210,
A.A142190,
A.A142191,
A.A14223,
A.A142287,
A.A14229,
A.A1423,
A.A14230,
A.A14234,
A.A1424,
A.A1425,
A.A1426,
A.A142786,
A.A1428,
A.A1429,
A.A14352,
A.A14353,
A.A144160,
A.A14463,
A.A14547,
A.A14551,
A.A146158,
A.A15190,
A.A15191,
A.A15192,
A.A15193,
A.A152103,
A.A152116,
A.A152117,
A.A152118,
A.A152140,
A.A152189,
A.A152211,
A.A1523,
A.A15254,
A.A15271,
A.A153163,
A.A153169,
A.A153170,
A.A153171,
A.A153172,
A.A153173,
A.A153174,
A.A153175,
A.A153176,
A.A153183,
A.A153184,
A.A153185,
A.A153186,
A.A153200,
A.A153201,
A.A153202,
A.A153203,
A.A153207,
A.A15331,
A.A15359,
A.A15387,
A.A15434,
A.A155152,
A.A156124,
A.A156153,
A.A16016,
A.A161147,
A.A161204,
A.A161205,
A.A161206,
A.A161209,
A.A1618,
A.A16183,
A.A16239,
A.A16240,
A.A16241,
A.A1627,
A.A16294,
A.A16297,
A.A163132,
A.A163133,
A.A163134,
A.A163197,
A.A16327,
A.A16332,
A.A16358,
A.A164181,
A.A165141,
A.A20040,
A.A24118,
A.A24121,
A.A24217,
A.A24220,
A.A24316,
A.A24319,
A.A24322,
A.A24511,
A.A24512,
A.A24513,
A.A24514,
A.A24515,
A.A24623,
A.A26239,
A.A62311,
A.A65245,
A.APPCODE,
A.APPNAME,
A.APPSOLACCNO,
A.APPSOLBANKSEQNO,
A.APPSOLDEBITACCOUNT,
A.APPSOLNAME,
A.APPSTATUS,
A.APPWORKGROUPDESC,
A.APPWORKTEAMDESC,
A.APPWTCATEGORY,
A.APPWTCOSTCENTRE,
A.B36526,
A.B36528,
A.B36530,
A.B43270,
A.B52428,
A.C152168,
A.C21257,
A.C23213,
A.C25346,
A.C2563,
A.C42012,
A.C53114,
A.C63181,
A.C63523,
A.C63552,
A.D113195,
A.D1232,
A.D1233,
A.D12375,
A.D23028,
A.D31259,
A.D32149,
A.D32446,
A.DECCODE,
A.DECDESC,
A.DESCR,
A.E21026,
A.E216111,
A.E222196,
A.E23674,
A.F6235,
A.F62544,
A.F635119,
A.G62031,
A.H55676,
A.I52111,
A.I5213,
A.I5214,
A.I52213,
A.I52361,
A.I5247,
A.I5249,
A.I52510,
A.I52512,
A.I525120,
A.I52514,
A.I5255,
A.I5256,
A.I5258,
A.K32527,
A.L15225,
A.L31441,
A.L31475,
A.L32034,
A.L5502,
A.L553112,
A.L6203,
A.L6334,
A.L6505,
A.L6556,
A.L6557,
A.M2351,
A.M235165,
A.M243113,
A.M3213,
A.M32149,
B.M32238,
B.M32239,
B.M32254,
B.M32314,
B.M32315,
B.M32330,
B.M32352,
B.M32361,
B.M32416,
B.M32455,
B.M32456,
B.M32460,
B.M32462,
B.M32537,
B.M32563,
B.M32564,
B.M32646,
B.M32647,
B.M32648,
B.M32651,
B.M32653,
B.M63129,
B.M63214,
B.M6326,
B.M6327,
B.M6328,
B.M63558,
B.M6359,
B.M63640,
B.N12622,
B.N52029,
B.N53553,
B.NOTICEADDRESS1,
B.NOTICEADDRESS2,
B.NOTICEADDRESS3,
B.NOTICEADDRESS4,
B.NOTICEADDRESS5,
B.NOTICECOUNTRYCODE,
B.NOTICEFOREIGNADDRIND,
B.NOTICENUMBER,
B.NOTICEPOSTCODE,
B.O21648,
B.O26247,
B.O36250,
B.O6255,
B.P53119,
B.P5314,
B.P5325,
B.P53520,
B.P5353,
B.P61157,
B.P61213,
B.P61220,
B.P61221,
B.P61229,
B.P61230,
B.P61237,
B.P6124,
B.P612425,
B.P61243,
B.P61244,
B.P61260,
B.P61336,
B.P61416,
B.P61417,
B.P61418,
B.P6141926,
B.P614199,
B.P61421,
B.P61428,
B.P6143,
B.P61431,
B.P6143321,
B.P614338,
B.P6143523,
B.P614357,
B.P61436,
B.P61437,
B.P6143820,
B.P614386,
B.P61439,
B.P61440,
B.P6146,
B.P61462,
B.P61534,
B.P61543,
B.P61580,
B.P61622,
B.P61624,
B.P61658,
B.P62132,
B.P625122,
B.P63618,
B.PLANRESTR,
B.PMNTACCNO,
B.PMNTBANKSEQNO,
B.PMNTDEBITACCOUNT,
B.PMNTNAME,
B.PROPADDRESS1,
B.PROPADDRESS2,
B.PROPADDRESS3,
B.PROPADDRESS4,
B.PROPADDRESS5,
B.PROPCODE,
B.PROPCOUNTRYCODE,
B.PROPDESC,
B.PROPFLAT,
B.PROPFOREIGNADDRIND,
B.PROPNUMBER,
B.PROPPOSTCODE,
B.PRORESTRICTED,
B.Q335100,
B.R112142,
B.R12545,
B.R223167,
B.R31550,
B.R32232,
B.R3536,
B.R422104,
B.R431106,
B.R453105,
B.R462107,
B.R534121,
B.RCODE,
B.RDESC,
B.REGCODE,
B.REGCOUNTRY,
B.REGDESC,
B.S13427,
B.S20011,
B.S20015,
B.S2003,
B.S2007,
B.S23212,
B.S23213,
B.S23216,
B.S23217,
B.S2324,
B.S2325,
B.S2328,
B.S2329,
B.S23310,
B.S23314,
B.S23318,
B.S2336,
B.S25346,
B.S31225,
B.S3232,
B.S34526,
B.S36019,
B.S36021,
B.S36022,
B.S36023,
B.S36024,
B.S42518,
B.S50020,
B.STGSTAGENO,
B.STGSTGDESC,
B.STGWORKGROUPDESC,
B.STGWORKTEAMDESC,
B.STGWTCATEGORY,
B.STGWTCOSTCENTRE,
B.T325149,
B.T52354,
B.T53356,
B.T55355,
B.T55361,
B.U625148,
B.V41244,
B.V41336,
B.V41339,
B.V41341,
B.V41371,
B.V41433,
B.V41434,
B.V41435,
B.V41454,
B.V41464,
B.V41467,
B.V41537,
B.V41552,
B.V41572,
B.V41642,
B.V4165,
B.V41668,
B.V42057,
B.V42116,
B.V42151,
B.V42246,
B.V42249,
B.V42273,
B.V42317,
B.V42338,
B.V42355,
B.V42365,
B.V42456,
B.V42510,
B.V42511,
B.V42512,
B.V42513,
B.V42514,
B.V42515,
B.V42523,
B.V42525,
B.V42545,
B.V4259,
B.V42653,
B.V42659,
B.V42660,
B.V43045,
B.V43120,
B.V43166,
B.V43440,
B.V43526,
B.V43530,
B.V43648,
B.V43662,
B.V44247,
B.V45143,
B.V45263,
B.V45361,
B.V45377,
B.V4604,
B.V46158,
B.V46169,
B.V46232,
B.V46331,
B.V46350,
B.V46527,
B.V46528,
B.V46529,
B.V61544,
B.VALPROPCODE,
B.VALPROPDESC
  FROM  TB_SRC_APP_A AS  A 
 INNER JOIN TB_SRC_APP_B AS B
    ON A.IndexA = B.IndexB
END
GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_SDM_CHECK_FILE_PACKAGE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_SDM_CHECK_FILE_PACKAGE]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_SDM_CHECK_FILE_PACKAGE]   
     (@FILENAME VARCHAR(100),@PACKAGEPATH VARCHAR (255),   
     @CATEGORY VARCHAR (30) , @PRIORITY INT  
     ,@AUDIT_ENABLE BIT, @RESULT INT OUT   )   
AS  
BEGIN  
  
 -- VARIABLE TO STORE THE FILE STATUS FROM SFM TABLE  
 DECLARE @FILE_STATUS AS VARCHAR(50)  
 DECLARE @FILE_EXISTS INT        -- TO HOLD THE STATUS OF FILE EXISTANCE ..1 EXISTS, 0 NOT EXISTS.  
 DECLARE @SOURCE_FILENAME VARCHAR(100)  
 DECLARE @PACKAGE_NAME VARCHAR(100)  
 DECLARE @CHUNK_NUMBER CHAR(2)  
 DECLARE @TRANCHE_NUMBER CHAR(2)  
 DECLARE @SOURCE_TABLE_NAME VARCHAR(100)  
 DECLARE @FULLPATHFILE VARCHAR(255)  
 DECLARE @ROW_COUNT INT  
 DECLARE @AUDIT_LOG_MSG VARCHAR(MAX)  
 DECLARE @FILENAMESFMT VARCHAR (100)
 DECLARE @CPS_CNT_CTL INT --SWAMY
 DECLARE @FLAG BIT
 DECLARE @CPS_CNT_WST INT
 -- RETURN FOLLOWING VALUES FROM PROCEDURE  
 -- 0 SUCCESSFUL  
 -- 1 - PACKAGE NOT FOUND -UNSUCCESFUL  
 -- 2 - RECORD EXIST IN TB_UDMH_LOADQUEUE -UNSUCCESFUL  
 -- 3 - FILE STATUS IN SDM IS NOT NULL  
 -- 4 - 'NO RECORD  IN SDM TABLE'   
  
 BEGIN  
	SET @FLAG=1 --SWAMY
 	IF  (@CATEGORY = 'SOURCE')
		SET @FILENAMESFMT=@FILENAME  	
	ELSE IF (@CATEGORY = 'CONTROL') 
		BEGIN
		SET @FILENAMESFMT=RIGHT(@FILENAME,8)
		END
	
 -- SELECT PACKAGE NAME FOR THE CORRESPONDING FILENAME  
	SELECT @SOURCE_FILENAME = @FILENAME,  
    @PACKAGE_NAME = PACKAGE_NAME,  
    @FILE_STATUS = SOURCE_LOAD_STATUS,  
    @CHUNK_NUMBER = CHUNK_NUMBER,  
    @TRANCHE_NUMBER =TRANCHE_NUMBER,  
    @SOURCE_TABLE_NAME = STAGING_TABLE_NAME    
	 FROM TB_UDMH_SDMT   
	 WHERE SOURCENAME = @FILENAMESFMT 
	SET @ROW_COUNT = @@ROWCOUNT; -- GET THE ROW COUNT  
 END  
    
 IF @ROW_COUNT >= 1  
	  BEGIN  
	   --PRINT ( 'STAGE 1')    
	   IF (@FILE_STATUS IS NULL)  
				BEGIN  
				--PRINT ( 'STAGE 2')      
					-- UPDATE THE FILE STATUS AGAEINST THE FILE NAME  					
				 UPDATE TB_UDMH_SDMT SET SOURCE_LOAD_STATUS ='READYTOLOAD'   
				 WHERE SOURCENAME = @FILENAMESFMT 							
					 BEGIN  
					  SET @FULLPATHFILE = @PACKAGEPATH+@PACKAGE_NAME+'.DTSX';  
					  EXEC MASTER.DBO.XP_FILEEXIST @FULLPATHFILE, @FILE_EXISTS OUT   
					 END  
			       
				 IF @FILE_EXISTS = 1   
				  BEGIN  					  
				   --PRINT 'PACKAGE FOUND'   
				   IF NOT EXISTS (SELECT SSIS_PACKAGE_NAME FROM DBO.TB_UDMH_LOADQUEUE   
					   WHERE TRANCHENUMBER = @TRANCHE_NUMBER  
					   AND CHUNKNUMBER = @CHUNK_NUMBER          
					   AND SOURCENAME = @SOURCE_FILENAME) AND @FLAG=1 
			           
					BEGIN  
					 INSERT INTO [DBO].[TB_UDMH_LOADQUEUE]  
					  ([TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],  
					  [SSIS_PACKAGE_NAME],[STAGING_TABLE_NAME],  
					  [CATEGORY],[PRIORITY],[STATUS])   
					 VALUES (ISNULL(@TRANCHE_NUMBER,'0'), @CHUNK_NUMBER,@SOURCE_FILENAME,  
					   @PACKAGE_NAME, @SOURCE_TABLE_NAME,  
					   @CATEGORY, @PRIORITY, 'READY') ;  
					 --PRINT 'INSERTED A RECORD FOR TB_UDMH_LOADQUEUE'   
					 SET @RESULT = 0  
					 SET @AUDIT_LOG_MSG = 'TR'+ ISNULL (@TRANCHE_NUMBER,'')+', CH'+ISNULL (@CHUNK_NUMBER,'')+', SOURCE MODULE:' + ISNULL (@SOURCE_FILENAME,'')+' - INSERTED A RECORD INTO TB_UDMH_LOADQUEUE.';    
					END  
				   ELSE  
					BEGIN           
					 --PRINT 'RECORD ALREADY IN TB_UDMH_LOADQUEUE TABLE'  
						IF  @FLAG=1 
							BEGIN
							 SET @RESULT = 2  
							 SET @AUDIT_LOG_MSG = 'TR'+ISNULL (@TRANCHE_NUMBER,'')+', CH'+ISNULL (@CHUNK_NUMBER,'')+', SOURCE MODULE:' + ISNULL (@SOURCE_FILENAME,'')+' - RECORD ALREADY EXIST IN TB_UDMH_LOADQUEUE TABLE.';  
							END
						ELSE
							BEGIN
								SET @RESULT = 2  
								SET @AUDIT_LOG_MSG = 'TR'+ISNULL (@TRANCHE_NUMBER,'')+', CH'+ISNULL (@CHUNK_NUMBER,'')+', SOURCE MODULE:' + ISNULL (@SOURCE_FILENAME,'')+' -RETRIEVING CPS MODULES ARE IN PROGRESS, CURRENTLY '+CAST(@CPS_CNT_WST AS VARCHAR) +' MODULES  RECEVIED.' ;  
							END

					END  
				  END  
				 ELSE    
				  BEGIN   
				   --PRINT 'PACKAGE NOT FOUND'   
				   SET @RESULT = 1  
				   SET @AUDIT_LOG_MSG = 'TR'+ISNULL (@TRANCHE_NUMBER,'')+', CH'+ISNULL (@CHUNK_NUMBER,'')+', SOURCE MODULE:' +ISNULL (@SOURCE_FILENAME,'')+' - PACKAGE ' + @FULLPATHFILE+ ' DOES NOT EXIST IN THE PATH.';  
				  END   
				     
				END 
				 
	   ELSE  
		BEGIN   
		 --PRINT 'FILE STATUS IN SDM IS NOT NULL'  
		 SET @RESULT = 3  
		 SET @AUDIT_LOG_MSG = 'TR'+ISNULL (@TRANCHE_NUMBER,'')+',CH'+ISNULL (@CHUNK_NUMBER,'')+',SOURCE MODULE:' +ISNULL (@SOURCE_FILENAME,'')+' - MODULE STATUS IS NOT NULL IN SDMT TABLE.';  
		END   
	      
	         
	  END  
 ELSE   
	  BEGIN   
	   --  PRINT 'NO RECORD  IN SDM TABLE'   
	   SET @RESULT = 4  
	   SET @AUDIT_LOG_MSG = 'TR'+@TRANCHE_NUMBER+',CH'+@CHUNK_NUMBER+',SOURCE MODULE:' +@SOURCE_FILENAME+' - NO RECORD EXIST IN SDMT TABLE.';  
	  END   
    
 -- INSERT INTO AUDIT TABLE  
 BEGIN   
  IF @AUDIT_ENABLE = 1  
   INSERT INTO [DBO].[TB_UDMH_AUDIT]  
       ([LOG_DATETIME]  
       ,[LOG_COMPONENT]  
       ,[LOG_MESSAGE])  
    VALUES (GETDATE(),          
     'SDM - [PR_UDMH_SDM_CHECK_FILE_PACKAGE]',  
     @AUDIT_LOG_MSG )               
 END  
 -- RETURN THE RESULT  
 RETURN @RESULT  
END 


GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_STM_GET_DATA_LOADQUEUE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_STM_GET_DATA_LOADQUEUE]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_STM_GET_DATA_LOADQUEUE] 
AS
BEGIN
	SELECT	L.CHUNKNUMBER,L.TRANCHENUMBER,L.SOURCENAME,
			L.SSIS_PACKAGE_NAME,L.STAGING_TABLE_NAME ,
			L.[CATEGORY],L.[STATUS],L.PRIORITY
		 FROM TB_UDMH_LOADQUEUE L  
		 WHERE L.[STATUS] IN ('READY')
		 ORDER BY L.PRIORITY 
END

GO

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_STM_NUM_PKG_PROGRESS]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_STM_NUM_PKG_PROGRESS]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_STM_NUM_PKG_PROGRESS]	
AS
BEGIN
DECLARE @RUNNINGPKG AS INT
DECLARE @STARTED AS INT 
 	   SELECT @RUNNINGPKG= COUNT( PKGLOG.STATUS)FROM DBO.PACKAGELOG PKGLOG	WHERE STATUS = 'R'
		SELECT @STARTED =COUNT( STATUS)  FROM TB_UDMH_LOADQUEUE WHERE STATUS= 'STARTED'
		
	SELECT @RUNNINGPKG + @STARTED
	PRINT @RUNNINGPKG
	PRINT @STARTED

END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TCWS_CHECKCONTROL_FILE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TCWS_CHECKCONTROL_FILE]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TCWS_CHECKCONTROL_FILE]  
AS  
BEGIN  
	SELECT COUNT (ID)  FROM TB_UDMH_LOADQUEUE 
		WHERE [CATEGORY] ='CONTROL' AND [STATUS] ='READY'    
END  

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_STM_UPDATE_LQ]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_STM_UPDATE_LQ]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_STM_UPDATE_LQ] 
(@PACKAGENAME  VARCHAR(100),@CHUNKNUM VARCHAR(2),@TRANCHENUM VARCHAR(2))
AS  
BEGIN  
	IF((@PACKAGENAME LIKE '%START') OR (@PACKAGENAME LIKE '%END') OR (@PACKAGENAME LIKE '%TRN') OR (@PACKAGENAME LIKE '%RPT') )
		UPDATE TB_UDMH_LOADQUEUE SET STATUS='STARTED' WHERE SSIS_PACKAGE_NAME=@PACKAGENAME
	ELSE
		UPDATE TB_UDMH_LOADQUEUE SET STATUS='STARTED' WHERE SSIS_PACKAGE_NAME=@PACKAGENAME AND CHUNKNUMBER=@CHUNKNUM AND TRANCHENUMBER=@TRANCHENUM

    
END 

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_STATS_INSERT_LQ]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_STATS_INSERT_LQ]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_STATS_INSERT_LQ]
AS 
BEGIN
	IF NOT EXISTS( SELECT * FROM [TB_UDMH_LOADQUEUE] WHERE TRANCHENUMBER='01' AND CHUNKNUMBER='01' AND [CATEGORY]='STATS' AND SSIS_PACKAGE_NAME='PKG_PX_STATS')  
		BEGIN 
		INSERT INTO [DBO].[TB_UDMH_LOADQUEUE]
								([TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],
								[SSIS_PACKAGE_NAME],[STAGING_TABLE_NAME],
								[CATEGORY],[PRIORITY],[STATUS]) 
							VALUES ('01', '01','STAT',
									'PKG_PX_STATS','TB_UDMH_STATS', 
									'STATS', 1 ,'READY' )
								
		END
								
	IF ((SELECT COUNT(PACKAGE_NAME) FROM TB_UDMH_SDMT WHERE PACKAGE_NAME IN ('PKG_PX_STATS') AND SOURCE_LOAD_STATUS='SRCDATALOADED') = 1)
		RETURN 1
	ELSE
		RETURN 0	
END

GO


IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TCWS_GETCHUNKTOSTART]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TCWS_GETCHUNKTOSTART]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TCWS_GETCHUNKTOSTART]   
    -- @X03TARGETTYPECOUNT AS INT,  
     @X02TARGETTYPECOUNT AS INT,  
     @CHUNKCOUNT INT OUTPUT  
AS  
BEGIN  
 -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM  
 -- INTERFERING WITH SELECT STATEMENTS.  
     SET NOCOUNT ON;  
     DECLARE @CHKAUTOMATION AS INT =1  ----CHECKING THE AUTOMATION IS 0,1,2 
                                               --- 1 ---> AFTER LOADING SEGMENTS FOR ALL CHUNK , START TRANSFORMATION.
            ,@SETAUTOMATION AS INT = 1 ---- SETTING THE BIT IF CTL AND SFMT DATA IS MATCHED
     ----GETTING THE BIT STATUS TO PROCESS AUTOMATION SWITCH
    SET @CHKAUTOMATION= (SELECT [AUTOMATION_SWITCH]  FROM TB_UDMH_CTL_TEMP)
 
     DECLARE @CTLCOUNT AS INT ,@SFMTCOUNT AS INT 
	
      --FLOW 1 
     IF (@CHKAUTOMATION = 1)
     BEGIN                                                
          --- GET THE COUNT FROM SDMT TABLE FOR ALL THE SEGMENT  PACKAGES (INPUT FILES)
          SET @SFMTCOUNT =( 
          SELECT COUNT([CATEGORY]) [CATEGORY_COUNT] FROM TB_UDMH_SDMT 
          WHERE CATEGORY IN('SEGMENT') AND SOURCE_LOAD_STATUS='SRCDATALOADED')
                   
           SET @CTLCOUNT =(SELECT [FLOW1_SEGCNT]  FROM TB_UDMH_CTL_TEMP )
    END
      
               
    ---COMPARING ACUTAL NUMBER OF CHUNKS WITH SDMT CHUNKS WHERE ALL SEGMENT/INPUT FILES ARE FILELOADED
    IF ((CAST(@CTLCOUNT AS INT) = CAST(@SFMTCOUNT AS INT)))
       BEGIN  
	  
		   --CALLING  THE STAT GATHERING SP
		   DECLARE @CNTSTAT AS INT
		   EXEC  @CNTSTAT = PR_UDMH_STATS_INSERT_LQ
		   IF ( @CNTSTAT =1)
			  SET @SETAUTOMATION=1
		   ELSE
			  SET @SETAUTOMATION=0
		END 
    ELSE
       SET @SETAUTOMATION=0
      
      --FLOW  1
     IF (@SETAUTOMATION=1)
          BEGIN
           SELECT TS.MODULE_TYPE
			     , COUNT (TS.TARGET_TYPE) COUNT_TT 
		   FROM TB_UDMH_TST TS  
		   WHERE TS.LOAD_STATUS IS NULL  AND TS.CATEGORY IN ('TRANSFORMATION') AND TS.MODULE_TYPE='X02'
		   GROUP BY MODULE_TYPE  
		   HAVING COUNT(TARGET_TYPE)=@X02TARGETTYPECOUNT
		 
		   --UNION ALL 
		   --SELECT TS.MODULE_TYPE
		   --      ,COUNT (TS.TARGET_TYPE) COUNT_TT 
		   --FROM TB_UDMH_TST TS  
		   --WHERE TS.LOAD_STATUS IS NULL  AND TS.CATEGORY IN ('TRANSFORMATION')AND TS.MODULE_TYPE='X03'
		   --GROUP BY MODULE_TYPE  
		   --HAVING COUNT(TARGET_TYPE)=@X03TARGETTYPECOUNT                            
          END
              
      SET @CHUNKCOUNT=(SELECT COUNT (*) 
                       FROM  ( SELECT TS.MODULE_TYPE
							         ,COUNT (TS.TARGET_TYPE) COUNT_TT 
					           FROM TB_UDMH_TST TS  
					           WHERE TS.LOAD_STATUS IS NULL  AND TS.CATEGORY IN ('TRANSFORMATION') AND TS.MODULE_TYPE='X02'
					           GROUP BY MODULE_TYPE  
					           HAVING COUNT(TARGET_TYPE)=@X02TARGETTYPECOUNT
					 
							   --UNION ALL 
							   --SELECT TS.MODULE_TYPE
									 --,COUNT (TS.TARGET_TYPE) COUNT_TT 
							   --FROM TB_UDMH_TST TS  
							   --WHERE TS.LOAD_STATUS IS NULL  AND TS.CATEGORY IN ('TRANSFORMATION')AND TS.MODULE_TYPE='X03'
							   --GROUP BY MODULE_TYPE 
							   --HAVING COUNT(TARGET_TYPE)=@X03TARGETTYPECOUNT 
							   ) AS CTL 
						)
                                    
  
END  

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TSA_LOADQUEUE_INSERT]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TSA_LOADQUEUE_INSERT]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TSA_LOADQUEUE_INSERT]   
	 @TRANCHENUMBER VARCHAR(2),  
	 @FILETYPE VARCHAR(3),   
	 @SOURCEFILENAME VARCHAR(100),  
	 @SSIS_PACKAGE_NAME VARCHAR(100),  
	 @SOURCE_TABLE_NAME VARCHAR(100),  
	 @CATEGORY VARCHAR(30) ,  
	 @PRIORITY NUMERIC(2, 0),  
	 @STATUS VARCHAR(15) ,
	 @X02COUNT INT OUTPUT
	 --@ACKNAME VARCHAR(20)
	 
  
AS  
BEGIN  
 --DECLARE @ACKFILENAME VARCHAR(255) 
-- INSERT STATEMENT  
IF NOT EXISTS( SELECT * FROM [TB_UDMH_LOADQUEUE] WHERE TRANCHENUMBER=@TRANCHENUMBER  AND [CATEGORY]=@CATEGORY AND SSIS_PACKAGE_NAME=@SSIS_PACKAGE_NAME)  
	BEGIN  
		 INSERT INTO [DBO].[TB_UDMH_LOADQUEUE]    
		  ([TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],    
		  [SSIS_PACKAGE_NAME],[STAGING_TABLE_NAME],    
		  [CATEGORY],[PRIORITY],[STATUS],[MODULE_TYPE])       
			VALUES     
		  (@TRANCHENUMBER, '01',@SOURCEFILENAME,    
		  @SSIS_PACKAGE_NAME, @SOURCE_TABLE_NAME,     
		  @CATEGORY, @PRIORITY, @STATUS,@FILETYPE)            
	END   
 
	 SET @X02COUNT = -1
	 IF @SOURCEFILENAME ='X02'
		BEGIN
			SELECT @X02COUNT= COUNT(TS_ID) FROM TB_UDMH_TST WHERE TRANCHE_NUMBER=@TRANCHENUMBER  AND LOAD_STATUS='COMPLETED' AND PACKAGE_NAME=@SSIS_PACKAGE_NAME AND MODULE_TYPE=@FILETYPE
		END
  --   ELSE IF @SOURCEFILENAME ='X03'
		--BEGIN
		--	SELECT @X02COUNT= COUNT(TS_ID) FROM TB_UDMH_TST WHERE TRANCHE_NUMBER=@TRANCHENUMBER  AND LOAD_STATUS='COMPLETED' AND PACKAGE_NAME=@SSIS_PACKAGE_NAME AND MODULE_TYPE=@FILETYPE
		--END		
END 

GO

--SP [PR_UDMH_TSA_LOADQUEUE_TSPACKAGE] IS USED TO LOAD THE TARGET PACKAGES WHICH ARE READY TO EXECUTE INTO LOADQUEUE TABLE.
--SP RETURNS AN INTEGER VALUE  AS AN OUTPUT PARAMETER (@COUNT) WHICH WILL GIVE HOW MANY TARGET PACKAGES ARE LEFT UNCOMPLETED
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TSA_LOADQUEUE_TSPACKAGE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TSA_LOADQUEUE_TSPACKAGE]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TSA_LOADQUEUE_TSPACKAGE] 
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
		@TRANCHNUMBER VARCHAR(10),
	    @FILETYPE VARCHAR(10),
	    @CATEGORY VARCHAR(20),
	    @AUDIT_ENABLE BIT,
	    @COUNT INT OUTPUT
AS
	DECLARE @TARGET_TYPE VARCHAR(30)
	DECLARE @PACKAGE_NAME VARCHAR(35)
	DECLARE @AUDIT_LOG_MSG VARCHAR(MAX)
	DECLARE @ACKFILENAME VARCHAR(255)
	DECLARE @TABLENAME VARCHAR(50)
	--INITIALIZING COUNTER TO 1
	DECLARE @ICOUNTER INT =1 
	-- DECLARING VARIABLE TO GET THE COUNT IN TEMP
	DECLARE @COUNTTEMP INT 	
	-- DECLARING TABLE VARIABLE
	DECLARE @TTARGET TABLE ( ID INT IDENTITY(1,1), TARGETTYPE VARCHAR(30), PACKAGENAME VARCHAR(30) ) 
		
BEGIN

	SET NOCOUNT ON;	
	IF @CATEGORY='TRANSFORMATION'	
		BEGIN
			  INSERT INTO @TTARGET(TARGETTYPE,PACKAGENAME)			
				SELECT  TARGET_TYPE, PACKAGE_NAME FROM TB_UDMH_TST
					WHERE TB_UDMH_TST.TARGET_TYPE NOT IN 
						(  SELECT DISTINCT (TS.TARGET_TYPE) 
							   FROM TB_UDMH_TST TS
							   INNER JOIN TB_UDMH_SRCTGT_DEP NDS ON TS.TARGET_TYPE=NDS.TARGET_TYPE
							   INNER JOIN TB_UDMH_SDMT SDM ON SDM.SOURCENAME=NDS.DEPENDENT_SOURCE
							   WHERE TS.LOAD_STATUS IS NULL AND (UPPER(SDM.SOURCE_LOAD_STATUS) NOT IN ('SRCDATALOADED') OR SDM.SOURCE_LOAD_STATUS IS NULL)    
								--AND TS.CHUNK_NUMBER =  @CHUNKNUMBER AND SDM.CHUNK_NUMBER = @CHUNKNUMBER AND SDM.TRANCHE_NUMBER=@TRANCHNUMBER AND TS.TRANCHE_NUMBER=@TRANCHNUMBER
								--AND TS.CHUNK_NUMBER =  @CHUNKNUMBER AND SDM.TRANCHE_NUMBER=@TRANCHNUMBER AND TS.TRANCHE_NUMBER=@TRANCHNUMBER -- REMOVED CHUNK NUMBER VALIDATION FOR SDM TABLE TO PROCESS WITH MULTI CHUNK DATA AFTER 17TH OCT RELEASE
						)
					--AND TB_UDMH_TST.CHUNK_NUMBER = @CHUNKNUMBER AND TB_UDMH_TST.TRANCHE_NUMBER=@TRANCHNUMBER 
					AND TB_UDMH_TST.LOAD_STATUS IS NULL AND UPPER(TB_UDMH_TST.CATEGORY) IN ('TRANSFORMATION')			
					AND TB_UDMH_TST.MODULE_TYPE=@FILETYPE	
		END
	ELSE
		BEGIN				
		      INSERT INTO @TTARGET(TARGETTYPE,PACKAGENAME)
				SELECT  TARGET_TYPE, PACKAGE_NAME FROM TB_UDMH_TST
					WHERE TB_UDMH_TST.TARGET_TYPE NOT IN 
						(  SELECT DISTINCT (TS.TARGET_TYPE) 
							   FROM TB_UDMH_TST TS
							   INNER JOIN TB_UDMH_SRCTGT_DEP NDS ON TS.TARGET_TYPE=NDS.TARGET_TYPE
							   INNER JOIN TB_UDMH_SDMT SDM ON SDM.SOURCENAME=NDS.DEPENDENT_SOURCE
							   WHERE TS.LOAD_STATUS IS NULL AND (UPPER(SDM.SOURCE_LOAD_STATUS) NOT IN ('SRCDATALOADED') OR SDM.SOURCE_LOAD_STATUS IS NULL)    
								--AND TS.CHUNK_NUMBER =  @CHUNKNUMBER AND SDM.CHUNK_NUMBER = @CHUNKNUMBER AND SDM.TRANCHE_NUMBER=@TRANCHNUMBER AND TS.TRANCHE_NUMBER=@TRANCHNUMBER
								--AND TS.CHUNK_NUMBER =  @CHUNKNUMBER AND SDM.TRANCHE_NUMBER=@TRANCHNUMBER AND TS.TRANCHE_NUMBER=@TRANCHNUMBER -- REMOVED CHUNK NUMBER VALIDATION FOR SDM TABLE TO PROCESS WITH MULTI CHUNK DATA AFTER 17TH OCT RELEASE
						)
					--AND TB_UDMH_TST.CHUNK_NUMBER = @CHUNKNUMBER AND TB_UDMH_TST.TRANCHE_NUMBER=@TRANCHNUMBER 
					AND TB_UDMH_TST.LOAD_STATUS IS NULL AND UPPER(TB_UDMH_TST.CATEGORY)=@CATEGORY -- NOT STARTED YET.		
					AND TB_UDMH_TST.MODULE_TYPE=@FILETYPE
		END 
	--GET THE COUNT FROM TEMP TABLE
	SELECT @COUNTTEMP = COUNT(ID) FROM @TTARGET

	WHILE (@ICOUNTER <= @COUNTTEMP)
		BEGIN			
			SET @AUDIT_LOG_MSG = NULL; 
			SELECT  @TARGET_TYPE = RTRIM(TARGETTYPE) FROM @TTARGET WHERE ID = @ICOUNTER
			SELECT  @PACKAGE_NAME =RTRIM(PACKAGENAME) FROM @TTARGET WHERE ID = @ICOUNTER
			IF NOT EXISTS (SELECT SSIS_PACKAGE_NAME FROM DBO.TB_UDMH_LOADQUEUE 
										WHERE MODULE_TYPE=@FILETYPE								
										AND SOURCENAME = @TARGET_TYPE)	
				BEGIN			
				 SELECT  @TABLENAME= STAGING_TABLE_NAME FROM TB_UDMH_SDMT WHERE PACKAGE_NAME=@PACKAGE_NAME
					IF @CATEGORY IN ('TRANSFORMATION') AND @FILETYPE='X02'
						SET @TABLENAME ='TB_UDMH_X02'
					--ELSE IF @CATEGORY IN ('TRANSFORMATION') AND @FILETYPE='X03'
					--	SET @TABLENAME ='TB_UDMH_X03'	
									
					INSERT INTO [DBO].[TB_UDMH_LOADQUEUE]
						([TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],
						[SSIS_PACKAGE_NAME],[STAGING_TABLE_NAME],
						[CATEGORY],[PRIORITY],[STATUS],[MODULE_TYPE]) 
					VALUES (@TRANCHNUMBER, '01',@TARGET_TYPE,
							@PACKAGE_NAME, @TABLENAME, --'TB_UDMH_X02'
							@CATEGORY, 5 , 'READY',@FILETYPE )	;
					
					SET @AUDIT_LOG_MSG = 'TR'+@TRANCHNUMBER+',CH'+'01'+',TARGET TYPE:'+@TARGET_TYPE+' - RECORD INSERTED INTO TB_UDMH_LOADQUEUE TABLE';
				END
			ELSE
				BEGIN 
					
					SET @AUDIT_LOG_MSG = 'TR'+@TRANCHNUMBER+',CH'+'01'+',TARGET TYPE:'+@TARGET_TYPE+' - RECORD ALREADY EXIST IN TB_UDMH_LOADQUEUE TABLE';
				END
			
			BEGIN 		
				IF @AUDIT_ENABLE = 1
					
					INSERT INTO [DBO].[TB_UDMH_AUDIT]
						   ([LOG_DATETIME]
						   ,[LOG_COMPONENT]
						   ,[LOG_MESSAGE])
					VALUES (GETDATE(),								
						'TSA - PR_UDMH_TSA_LOADQUEUE_TSPACKAGE',
						@AUDIT_LOG_MSG)		
			END			
				SELECT @ICOUNTER = @ICOUNTER + 1						
		END
						
	SET @COUNT=(SELECT COUNT(*) FROM TB_UDMH_TST WHERE (LOAD_STATUS IS NULL OR LOAD_STATUS='INPROGRESS' OR LOAD_STATUS='MODULEUPLOADFAILED') AND TRANCHE_NUMBER=@TRANCHNUMBER AND UPPER(CATEGORY)=@CATEGORY AND UPPER(MODULE_TYPE)=@FILETYPE)
END 

GO
 
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[SPWRITESTRINGTOFILE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[SPWRITESTRINGTOFILE]
GO
CREATE  PROCEDURE [DBO].[SPWRITESTRINGTOFILE]
			 (
			@STRING VARCHAR(MAX),  
			@PATH VARCHAR(255),
			@FILENAME VARCHAR(100)
			)
AS
DECLARE  @OBJFILESYSTEM INT
        ,@OBJTEXTSTREAM INT,
		@OBJERROROBJECT INT,
		@STRERRORMESSAGE VARCHAR(1000),
	    @COMMAND VARCHAR(1000),
	    @HR INT,
		@FILEANDPATH VARCHAR(200)
BEGIN
SET NOCOUNT ON

SELECT @STRERRORMESSAGE='OPENING THE FILE SYSTEM OBJECT'
EXECUTE @HR = SP_OACREATE  'SCRIPTING.FILESYSTEMOBJECT' , @OBJFILESYSTEM OUT

PRINT '@PATH =' +@PATH
SELECT @PATH =  CASE WHEN (RIGHT(@PATH,1) = '\') THEN SUBSTRING(@PATH,1,LEN(@PATH)-1 )
					 ELSE @PATH  END
PRINT '@PATH =' +@PATH
SELECT @FILEANDPATH=@PATH+'\'+@FILENAME
IF @HR=0 SELECT @OBJERROROBJECT=@OBJFILESYSTEM , @STRERRORMESSAGE='CREATING FILE "'+@FILEANDPATH+'"'
IF @HR=0 EXECUTE @HR = SP_OAMETHOD   @OBJFILESYSTEM   , 'CREATETEXTFILE'
	, @OBJTEXTSTREAM OUT, @FILEANDPATH,2,TRUE

IF @HR=0 SELECT @OBJERROROBJECT=@OBJTEXTSTREAM, 
	@STRERRORMESSAGE='WRITING TO THE FILE "'+@FILEANDPATH+'"'
IF @HR=0 EXECUTE @HR = SP_OAMETHOD  @OBJTEXTSTREAM, 'WRITE', NULL, @STRING

IF @HR=0 SELECT @OBJERROROBJECT=@OBJTEXTSTREAM, @STRERRORMESSAGE='CLOSING THE FILE "'+@FILEANDPATH+'"'
IF @HR=0 EXECUTE @HR = SP_OAMETHOD  @OBJTEXTSTREAM, 'CLOSE'

IF @HR<>0
	BEGIN
	DECLARE 
		@SOURCE VARCHAR(255),
		@DESCRIPTION VARCHAR(255),
		@HELPFILE VARCHAR(255),
		@HELPID INT
	
	EXECUTE SP_OAGETERRORINFO  @OBJERROROBJECT, 
		@SOURCE OUTPUT,@DESCRIPTION OUTPUT,@HELPFILE OUTPUT,@HELPID OUTPUT
	SELECT @STRERRORMESSAGE='ERROR WHILST '
			+COALESCE(@STRERRORMESSAGE,'DOING SOMETHING')
			+', '+COALESCE(@DESCRIPTION,'')
	RAISERROR (@STRERRORMESSAGE,16,1)
	END
EXECUTE  SP_OADESTROY @OBJTEXTSTREAM
EXECUTE SP_OADESTROY @OBJTEXTSTREAM

END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_ACK_FILEGEN]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_ACK_FILEGEN]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_ACK_FILEGEN]
(   @ERRORCODE VARCHAR(255)
    ,@CHUNKNUMBER VARCHAR(2)
    ,@PACKAGENAME VARCHAR(100)    
)
AS
DECLARE @ACKFILEPATH VARCHAR(255),
		@BATCHFILEPATH VARCHAR(255),
		@ACKFILENAME VARCHAR(100),
		@FILE_NAME VARCHAR(100),
		@TYPE VARCHAR(20),
		@COMMAND_STR VARCHAR(2000),
		@BASEACKFILENAME VARCHAR(100), /* TO HOLD BASK ACK FILE NAME */
		@SOURCEFILENAME VARCHAR(100), /* TO HOLD SOURCE FILE NAME */
		@PACKAGE_NAME_SEG01 VARCHAR(100);/* TO HOLD PACAKGE NAME FROM WS TRANCH TABLE */ 
		 
	
BEGIN
--GENERATE ACK FILE SCRIPT
	--GET THE WS TRACNHE TABLE INFORMATION LIKE ACKFILEPATH, BATCHFILEPATH, BASEACKFILENAME AND PACKAGE_NAME_SEG01
	SELECT @ACKFILEPATH =[ACK_FILEPATH], @BATCHFILEPATH = [WS_BATCHFILEPATH]  ,@BASEACKFILENAME =[WS_BASE_ACK_FILENAME]--,@PACKAGE_NAME_SEG01=[WS-SEG01-PKG_NAME]
					FROM DBO.TB_UDMH_CTL_TEMP
	
	PRINT '@BATCHFILEPATH = '+@BATCHFILEPATH
	IF  UPPER (SUBSTRING ( @PACKAGENAME,1,6) )= 'PKG_PX' -- CHECK WHETHERE IT IS  "SOURCE' TYPE
		BEGIN
			IF  UPPER (@PACKAGENAME ) <> 'PKG_PX_CTL_START' AND UPPER (@PACKAGENAME ) <> 'PKG_PX_CTL_END' --- NO CHUNNK NUM FOR CONTROL FILE
				BEGIN		 		
					SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
						FROM DBO.TB_UDMH_SDMT
						WHERE PACKAGE_NAME = @PACKAGENAME
						AND CHUNK_NUMBER   = @CHUNKNUMBER;				
			 
					PRINT  '@ACKFILENAME ='+ @ACKFILENAME 
					PRINT  '@PACKAGENAME = '+ISNULL(@PACKAGENAME,'NO_PACKAGE_NAME')
					PRINT  '@ERRORCODE = '+@ERRORCODE
				END
			ELSE
				SELECT @ACKFILENAME = ACK_MODULENAME , @TYPE = CATEGORY
					FROM DBO.TB_UDMH_SDMT
					WHERE PACKAGE_NAME = @PACKAGENAME;
			
			SET @ACKFILENAME = @BASEACKFILENAME + @ACKFILENAME /* TO GET THE COMPLETE ACK FILENAME */
			EXECUTE SPWRITESTRINGTOFILE @ERRORCODE, @ACKFILEPATH, @ACKFILENAME 

			SELECT @ACKFILEPATH =  CASE WHEN (RIGHT(@ACKFILEPATH,1) = '\') THEN SUBSTRING(@ACKFILEPATH,1,LEN(@ACKFILEPATH)-1 )
					 ELSE @ACKFILEPATH  END  
			SET @COMMAND_STR = @BATCHFILEPATH+' '+@ACKFILEPATH+ '\'+ @ACKFILENAME  
			EXEC SYS.XP_CMDSHELL  @COMMAND_STR    --POWERSHELL	
		END	
		
END 

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_CTL_GEN]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_CTL_GEN]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_CTL_GEN] 
(
  @FILE_TYPE VARCHAR(15)
,@WS_ACKFILEPATH VARCHAR(255)
,@WS_BASE_ACK_FILENAME VARCHAR(255)
) AS
BEGIN
-- VARIABLE TO STORE THE FILE STATUS FROM SFM TABLE
  DECLARE @RUNTAG AS VARCHAR(8)
  DECLARE @RUNNUM AS INT
  SELECT @RUNTAG = [ALL_RUNTAG]  FROM DBO.TB_UDMH_CTL_TEMP
  -- CHECK FOR CONTROL TABLE WHETHER RUNTAG EXISTS
  -- THEN CHECK "@FILE_TYPE" WHETHER IT IS START FILE OR NOT..
  -- IF EXISTS UPDATE
  -- IF NOT EXISTS INSERT
  IF (SELECT COUNT(*) FROM DBO.TB_UDMH_CTL WHERE [ALL_RUNTAG] = @RUNTAG ) >0
    BEGIN
      SELECT @RUNNUM = EVENT_RUN_NO
        FROM DBO.TB_UDMH_CTL
       WHERE ALL_RUNTAG = @RUNTAG
      IF @FILE_TYPE = 'STA'
        BEGIN                     
          INSERT INTO TB_UDMH_CTL
          (
           ALL_RUNTAG
          ,WS_MIGR_DATE
		  ,WS_ACK_FILEPATH
		  ,WS_BASE_ACK_FILENAME
          ,EVENT_RUN_NO
          ,CURRENT_FLAG
          ,SOURCE
          ,GRACEDAYS
          ,FUNDER_CODE
          ,BOOK_NUMBER
          )
          SELECT  ALL_RUNTAG
                 ,CAST(WS_MIGR_DATE AS DATE)
				 ,ACK_FILEPATH
				 ,BASE_ACK_FN
                 ,@RUNNUM+1
                 ,'YES'
                 ,CTRL_SOURCE
                 ,CAST([GRACEDAYS] AS INT)
                 ,[FUNDER_CODE]
                 ,CAST([BOOK_NUMBER] AS INT)
          FROM DBO.[TB_UDMH_CTL_TEMP];

        END
      ELSE IF @FILE_TYPE = 'END'
      -- ACTUALLY WE NEED TO UPDATE HERE
      -- BUT WE ARE DELETEING THE RECORD AND RE-INSERTING WITH 
      -- "EVENT_RUN_NO" SAME AS OLD ONE.
      BEGIN
        DELETE FROM DBO.TB_UDMH_CTL  WHERE [ALL_RUNTAG] = @RUNTAG;                                                                              
        INSERT INTO TB_UDMH_CTL
        (
           ALL_RUNTAG
          ,WS_MIGR_DATE
		  ,WS_ACK_FILEPATH
		  ,WS_BASE_ACK_FILENAME
          ,EVENT_RUN_NO
          ,CURRENT_FLAG
          ,SOURCE
          ,GRACEDAYS
          ,FUNDER_CODE
          ,BOOK_NUMBER
        )
        SELECT  ALL_RUNTAG
               ,CAST(WS_MIGR_DATE AS DATE)
			   ,ACK_FILEPATH
			   ,BASE_ACK_FN
               ,@RUNNUM
               ,'YES'
               ,CTRL_SOURCE
               ,CAST(GRACEDAYS AS INT)
               ,[FUNDER_CODE]
               ,CAST([BOOK_NUMBER] AS INT)
        FROM DBO.[TB_UDMH_CTL_TEMP];
      END
    END
  ELSE  -- INSERT NEW RECORD IN TB_UDMH_CTL
    BEGIN
    IF @FILE_TYPE = 'STA'
    BEGIN
      INSERT INTO TB_UDMH_CTL
      (
           ALL_RUNTAG
          ,WS_MIGR_DATE
		  ,WS_ACK_FILEPATH
		  ,WS_BASE_ACK_FILENAME
          ,EVENT_RUN_NO
          ,CURRENT_FLAG
          ,SOURCE
          ,GRACEDAYS
          ,FUNDER_CODE
          ,BOOK_NUMBER
      )
      SELECT  ALL_RUNTAG
             ,CAST(WS_MIGR_DATE AS DATE)
		     ,ACK_FILEPATH
		     ,BASE_ACK_FN
             ,1
             ,'YES'
             ,CTRL_SOURCE
             ,CAST([GRACEDAYS] AS INT)
             ,[FUNDER_CODE],
             CAST([BOOK_NUMBER] AS INT)
      FROM DBO.[TB_UDMH_CTL_TEMP];
    END
    ELSE IF @FILE_TYPE = 'END'
      INSERT INTO [DBO].[TB_UDMH_AUDIT]
      ([LOG_DATETIME]
      ,[LOG_COMPONENT]
      ,[LOG_MESSAGE])
      VALUES ( GETDATE(),'PKG_PX_CTL_END',
      'RECORD FOR RUNTAG:' + @RUNTAG + ' DOES NOT EXIST IN CONTROL TABLE TB_UDMH_CTL.  (THE START CONTROL FILE MAY NOT INVOKED YET.)')
      END  
  END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TCWS_OPGENSTS]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TCWS_OPGENSTS]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TCWS_OPGENSTS] --(@TMSCHKCNT INT OUTPUT)
AS  
BEGIN  

	IF EXISTS (SELECT (ID) FROM TB_UDMH_LOADQUEUE	
				WHERE [CATEGORY] ='CONTROL' AND [STATUS] ='MODULELOADED' AND [SSIS_PACKAGE_NAME]='PKG_PX_CTL_END')
	BEGIN
		DECLARE @CTLALLCNT AS INT =0
		DECLARE @TSTX02CNT AS INT =0
		--DECLARE @TSTX03CNT AS INT =0
				-- GET THE NUMBER OF CHUNK WHERE X02 IS COMPLETED
		SELECT @TSTX02CNT= COUNT( TS_ID) FROM TB_UDMH_TST WHERE TARGET_TYPE='X02' AND  LOAD_STATUS = 'COMPLETED' AND CATEGORY='GENERATE'
		--SELECT @TSTX03CNT= COUNT( TS_ID) FROM TB_UDMH_TST WHERE TARGET_TYPE='X03' AND  LOAD_STATUS = 'COMPLETED' AND CATEGORY='GENERATE'
		--IF (@TSTX03CNT =1 AND  @TSTX02CNT=1)
		IF (@TSTX02CNT=1)
			SELECT 1
		ELSE 
			SELECT 0
	END
ELSE
   BEGIN		
		SELECT 0
	END  
END  



GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_SDM_CHK_SEGMENT]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_SDM_CHK_SEGMENT]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_SDM_CHK_SEGMENT]
(@SEGMENT AS VARCHAR(7), @AUDIT_ENABLE AS BIT)
AS

BEGIN
 IF NOT @SEGMENT IN (SELECT DISTINCT CATEGORY FROM TB_UDMH_SDMT)
   BEGIN
      IF @AUDIT_ENABLE = 1  
		INSERT INTO [DBO].[TB_UDMH_AUDIT]  ([LOG_DATETIME]  ,[LOG_COMPONENT]  ,[LOG_MESSAGE])  
		VALUES (GETDATE(), 'SDM - APPLICATION', 'SDM APPLICATION INSERTED PRE-DATA FOR SEGMENTS' )     
      
   END 
 ELSE
	BEGIN
		IF @AUDIT_ENABLE = 1  		
		INSERT INTO [DBO].[TB_UDMH_AUDIT]  ([LOG_DATETIME]  ,[LOG_COMPONENT]  ,[LOG_MESSAGE])  
		VALUES (GETDATE(), 'SDM - APPLICATION', 'PRE-DATA ALREADY EXISTS FOR' ) 
	END
END                                          

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TCWS_CREATETWOLINKSERVER]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TCWS_CREATETWOLINKSERVER]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TCWS_CREATETWOLINKSERVER]

 @SERVERNAMENODE2 AS VARCHAR(30),
 @SERVERNAMENODE3 AS VARCHAR(30)
 
 AS
 BEGIN 
	SET @SERVERNAMENODE2 = REPLACE(REPLACE(@SERVERNAMENODE2 ,'[',''),']','') 
    SET @SERVERNAMENODE3 = REPLACE(REPLACE(@SERVERNAMENODE3 ,'[',''),']','') 	
	DECLARE @USERID VARCHAR(30)=(SELECT  SUSER_NAME() LOGGEDINUSER);
	
	--CODE UPDATED BY PCM
	--CREATE LINK SERVER 1
	/************DELETE THE LINKSERVER1 IF EXISTS*************************/
	IF  EXISTS (SELECT SRV.NAME FROM SYS.SERVERS SRV WHERE SRV.SERVER_ID != 0 AND SRV.NAME = @SERVERNAMENODE2)
	EXEC MASTER.DBO.SP_DROPSERVER @SERVER=@SERVERNAMENODE2, @DROPLOGINS='DROPLOGINS'

	/****** OBJECT:  CREATE THE LINKSERVER1 SCRIPT DATE: 04/11/2012 17:29:32 ******/
	EXEC MASTER.DBO.SP_ADDLINKEDSERVER @SERVER = @SERVERNAMENODE2, @SRVPRODUCT=N'SQL SERVER'
	 /* FOR SECURITY REASONS THE LINKED SERVER REMOTE LOGINS PASSWORD IS CHANGED WITH ######## */
	EXEC MASTER.DBO.SP_ADDLINKEDSRVLOGIN @RMTSRVNAME=@SERVERNAMENODE2,@USESELF=N'TRUE',@LOCALLOGIN=NULL,@RMTUSER=NULL,@RMTPASSWORD=NULL
	--EXEC MASTER.DBO.SP_ADDLINKEDSRVLOGIN @RMTSRVNAME=@SERVERNAMENODE2,@USESELF=N'TRUE',@LOCALLOGIN=@USERID,@RMTUSER=NULL,@RMTPASSWORD=NULL
	EXEC MASTER.DBO.SP_SERVEROPTION @SERVER=@SERVERNAMENODE2, @OPTNAME=N'COLLATION COMPATIBLE', @OPTVALUE=N'FALSE'
	EXEC MASTER.DBO.SP_SERVEROPTION @SERVER=@SERVERNAMENODE2, @OPTNAME=N'DATA ACCESS', @OPTVALUE=N'TRUE'

	--CREATE LINK SERVER 2 // CODE HAS BEEN REPEATED FOR LINK SERVER 2 (ONLY CHNAGE IN SERVER NAME VARIBLE) AS NEED TO CREATE 2 LINK SERVER ONLY AND C# CODE NOT REQUIRE TO CHNAGE
	
	/************DELETE THE LINKSERVER2 IF EXISTS*************************/
	IF  EXISTS (SELECT SRV.NAME FROM SYS.SERVERS SRV WHERE SRV.SERVER_ID != 0 AND SRV.NAME = @SERVERNAMENODE3)
	EXEC MASTER.DBO.SP_DROPSERVER @SERVER=@SERVERNAMENODE3, @DROPLOGINS='DROPLOGINS'

	/****** OBJECT:  CREATE THE LINKSERVER2 SCRIPT DATE: 04/11/2012 17:29:32 ******/
	EXEC MASTER.DBO.SP_ADDLINKEDSERVER @SERVER = @SERVERNAMENODE3, @SRVPRODUCT=N'SQL SERVER'
	 /* FOR SECURITY REASONS THE LINKED SERVER REMOTE LOGINS PASSWORD IS CHANGED WITH ######## */
	EXEC MASTER.DBO.SP_ADDLINKEDSRVLOGIN @RMTSRVNAME=@SERVERNAMENODE3,@USESELF=N'TRUE',@LOCALLOGIN=NULL,@RMTUSER=NULL,@RMTPASSWORD=NULL
	--EXEC MASTER.DBO.SP_ADDLINKEDSRVLOGIN @RMTSRVNAME=@SERVERNAMENODE3,@USESELF=N'TRUE',@LOCALLOGIN=@USERID,@RMTUSER=NULL,@RMTPASSWORD=NULL
	EXEC MASTER.DBO.SP_SERVEROPTION @SERVER=@SERVERNAMENODE3, @OPTNAME=N'COLLATION COMPATIBLE', @OPTVALUE=N'FALSE'
	EXEC MASTER.DBO.SP_SERVEROPTION @SERVER=@SERVERNAMENODE3, @OPTNAME=N'DATA ACCESS', @OPTVALUE=N'TRUE'

	--RETURN THE NO. OF LINK SERVER COUNT. 
	SELECT COUNT([SERVER_ID]) FROM SYS.SERVERS WHERE [NAME] IN (@SERVERNAMENODE2 ,@SERVERNAMENODE3)

END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TSA_TARGETCNT_CMP]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TSA_TARGETCNT_CMP]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TSA_TARGETCNT_CMP]
@FILETYPE AS VARCHAR(03)
AS 

BEGIN

SELECT COUNT(TS_ID) FROM TB_UDMH_TST 

--WHERE PACKAGE_NAME IN ('PKG_UFSS_X02_CNT','PKG_UFSS_X03_CNT') 
WHERE PACKAGE_NAME IN ('PKG_UFSS_X02_CNT') 

AND LOAD_STATUS ='COMPLETED' AND MODULE_TYPE=@FILETYPE
END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_STM_CHK_CASCADE_PKG_CMP]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_STM_CHK_CASCADE_PKG_CMP]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_STM_CHK_CASCADE_PKG_CMP]   
AS   
BEGIN   
  
 DECLARE @CASECADECNT AS INT    
 SELECT @CASECADECNT= COUNT(ID)   
  FROM TB_UDMH_LOADQUEUE   
  WHERE SSIS_PACKAGE_NAME IN ('PKG_UFSS_CASC_ALS_TRN','PKG_UFSS_CASC_EXPERIAN_TRN','PKG_UFSS_CASC_MORT_TRN','PKG_UFSS_CASC_AKA_TRN')   
  AND STATUS ='MODULELOADED'  
 IF (@CASECADECNT =4)  
  SELECT 0  
 ELSE  
  SELECT 1   
  
END   

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TSA_TARGETCNT_CMP]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TSA_TARGETCNT_CMP]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TSA_TARGETCNT_CMP]
@FILETYPE AS VARCHAR(03)
AS 

BEGIN

SELECT COUNT(TS_ID) FROM TB_UDMH_TST 

WHERE PACKAGE_NAME IN ('PKG_UFSS_X02_CNT') 

AND LOAD_STATUS ='COMPLETED' AND MODULE_TYPE=@FILETYPE
END

GO

/*INSERTION OF EXCEPTIONS INTO THE EXCEPTION TABLE FROM FORMATTING VIEW*/
--DROP IF THE PROCEDURE ALREADY EXISTS
IF OBJECT_ID('PR_UDMH_EXCEPTION_INSERT',(SELECT TYPE FROM SYS.OBJECTS WHERE NAME='PR_UDMH_EXCEPTION_INSERT')) IS NOT NULL
   DROP PROCEDURE PR_UDMH_EXCEPTION_INSERT
   GO
   CREATE PROCEDURE DBO.PR_UDMH_EXCEPTION_INSERT 
      @EXCEPT_PACKAGE VARCHAR(100)
     ,@EXCEPT_CODE VARCHAR(50)
     ,@EXCEPT_SEVERITY CHAR(1)
     ,@EXCEPT_ACCOUNT_NO VARCHAR(16)
     ,@EXCEPT_SRC_FIELD_1 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_1 VARCHAR(1000)
     ,@EXCEPT_SRC_FIELD_2 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_2 VARCHAR(1000)
     ,@EXCEPT_SRC_FIELD_3 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_3 VARCHAR(1000)
     ,@EXCEPT_SRC_FIELD_4 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_4 VARCHAR(1000)
     ,@EXCEPT_SRC_FIELD_5 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_5 VARCHAR(1000)
     ,@EXCEPT_SRC_FIELD_6 VARCHAR(100)
     ,@EXCEPT_SRC_VALUE_6 VARCHAR(1000)
   AS
   BEGIN
     INSERT INTO DBO.TB_UDMH_EXCEPTION
     (
       EXCEPT_PACKAGE
      ,EXCEPT_CODE
      ,EXCEPT_SEVERITY
      ,EXCEPT_ACCOUNT_NO
      ,EXCEPT_SRCFIELD_1
      ,EXCEPT_SRCVALUE_1
      ,EXCEPT_SRCFIELD_2 
      ,EXCEPT_SRCVALUE_2
      ,EXCEPT_SRCFIELD_3
      ,EXCEPT_SRCVALUE_3
      ,EXCEPT_SRCFIELD_4
      ,EXCEPT_SRCVALUE_4
      ,EXCEPT_SRCFIELD_5
      ,EXCEPT_SRCVALUE_5
      ,EXCEPT_SRCFIELD_6
      ,EXCEPT_SRCVALUE_6
     )
     VALUES
     (
       @EXCEPT_PACKAGE
      ,@EXCEPT_CODE
      ,@EXCEPT_SEVERITY
      ,@EXCEPT_ACCOUNT_NO
      ,@EXCEPT_SRC_FIELD_1 
      ,@EXCEPT_SRC_VALUE_1 
      ,@EXCEPT_SRC_FIELD_2 
      ,@EXCEPT_SRC_VALUE_2 
      ,@EXCEPT_SRC_FIELD_3 
      ,@EXCEPT_SRC_VALUE_3 
      ,@EXCEPT_SRC_FIELD_4 
      ,@EXCEPT_SRC_VALUE_4 
      ,@EXCEPT_SRC_FIELD_5 
      ,@EXCEPT_SRC_VALUE_5 
      ,@EXCEPT_SRC_FIELD_6 
      ,@EXCEPT_SRC_VALUE_6 
     )
   END
   GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_EXCEPTION_INSERT_SYSTEM]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_EXCEPTION_INSERT_SYSTEM]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_EXCEPTION_INSERT_SYSTEM] 
	@EXCEPTTRANCHE VARCHAR(2),
	@EXCEPTCHUNK VARCHAR(2),
	@EXCEPTSRCSYSTEM VARCHAR(30),
	@EXCEPTSRCKEY1 VARCHAR(30),
	@EXCEPTTARGETTYPE VARCHAR(50) ,
	@EXCEPTMESSAGE VARCHAR(MAX)

AS
BEGIN
-- INSERT STATEMENT
INSERT INTO [DBO].[TB_UDMH_EXCEPTION_SYSTEM]
           ([EXCEPT_DATETIME],
            [EXCEPT_TRANCHE],
            [EXCEPT_CHUNK],
            [EXCEPT_SRCSYSTEM],
            [EXCEPT_SRCKEY1],
            [EXCEPT_TARGETTYPE] ,
	        [EXCEPT_MESSAGE]
            ) 
   VALUES 
		   (GETDATE(),
		    @EXCEPTTRANCHE,
		    @EXCEPTCHUNK,
			@EXCEPTSRCSYSTEM,
			@EXCEPTSRCKEY1,
			@EXCEPTTARGETTYPE,
			@EXCEPTMESSAGE
			
			)
 
END

GO

/*INSERTION OF EXCEPTIONS INTO THE EXCEPTION TABLE FROM XML EXCEPTION TABLE*/
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_XML_EXCEPTION_INSERT_MAIN]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT_MAIN]
GO

/****** OBJECT:  STOREDPROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT_MAIN]    SCRIPT DATE: 8/6/2015 5:56:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/* INSERT THE DATA FROM XML EXCEPTION TABLE TO EXCEPTION TABLE */
CREATE PROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT_MAIN](@RECORDTYPE VARCHAR(7))
AS
BEGIN
INSERT INTO DBO.TB_UDMH_EXCEPTION
     (
       EXCEPT_PACKAGE
      ,EXCEPT_CODE
      ,EXCEPT_SEVERITY
      ,EXCEPT_ACCOUNT_NO
      ,EXCEPT_SRCFIELD_1
      ,EXCEPT_SRCVALUE_1
      ,EXCEPT_SRCFIELD_2 
      ,EXCEPT_SRCVALUE_2
      ,EXCEPT_SRCFIELD_3
      ,EXCEPT_SRCVALUE_3
      ,EXCEPT_SRCFIELD_4
      ,EXCEPT_SRCVALUE_4
      ,EXCEPT_SRCFIELD_5
      ,EXCEPT_SRCVALUE_5
      ,EXCEPT_SRCFIELD_6
      ,EXCEPT_SRCVALUE_6
     )


SELECT 
	   T.C.value('@EXCEPT_PACKAGE','VARCHAR(100)') AS EXCEPT_PACKAGE
      ,T.C.value('@EXCEPT_CODE','VARCHAR(50)') AS EXCEPT_CODE
      ,T.C.value('@EXCEPT_SEVERITY','CHAR(1)') AS EXCEPT_SEVERITY
	  ,T.C.value('@EXCEPT_ACCOUNT_NO','VARCHAR(16)') AS EXCEPT_ACCOUNT_NO
	  ,T.C.value('@EXCEPT_SRC_FIELD_1','VARCHAR(100)') AS EXCEPT_SRC_FIELD_1
      ,T.C.value('@EXCEPT_SRC_VALUE_1','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_1
      ,T.C.value('@EXCEPT_SRC_FIELD_2','VARCHAR(100)') AS EXCEPT_SRC_FIELD_2
      ,T.C.value('@EXCEPT_SRC_VALUE_2','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_2
      ,T.C.value('@EXCEPT_SRC_FIELD_3','VARCHAR(100)') AS EXCEPT_SRC_FIELD_3
      ,T.C.value('@EXCEPT_SRC_VALUE_3','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_3
      ,T.C.value('@EXCEPT_SRC_FIELD_4','VARCHAR(100)') AS EXCEPT_SRC_FIELD_4
      ,T.C.value('@EXCEPT_SRC_VALUE_4','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_4
      ,T.C.value('@EXCEPT_SRC_FIELD_5','VARCHAR(100)') AS EXCEPT_SRC_FIELD_5
      ,T.C.value('@EXCEPT_SRC_VALUE_5','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_5
      ,T.C.value('@EXCEPT_SRC_FIELD_6','VARCHAR(100)') AS EXCEPT_SRC_FIELD_6
      ,T.C.value('@EXCEPT_SRC_VALUE_6','VARCHAR(1000)') AS EXCEPT_SRC_VALUE_6

    FROM TB_UDMH_XML_EXCEPTION EXC
OUTER APPLY 
        EXC.X02_UDMH_EXCEPTION.nodes('/row') AS T(C)
   WHERE CAST(EXC.X02_UDMH_EXCEPTION AS VARCHAR(MAX)) != '' AND EXCEPT_TARGETTYPE=@RECORDTYPE

END
GO

/* INSERT THE EXCEPTIONS FROM BASE QUERY TO XML_EXCEPTION TABLE */
/****** OBJECT:  STOREDPROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT]    SCRIPT DATE: 8/6/2015 5:53:58 PM ******/
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_XML_EXCEPTION_INSERT]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT]
GO

/****** OBJECT:  STOREDPROCEDURE [DBO].[PR_XML_EXCEPTION_INSERT]    SCRIPT DATE: 8/6/2015 5:53:58 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE dbo.PR_XML_EXCEPTION_INSERT
(
@RECORDTYPE AS VARCHAR(7)
)
AS
BEGIN
DECLARE @SQL VARCHAR(MAX)
DECLARE @TABLENAME VARCHAR(25)

SET @TABLENAME = 'VW_'+ @RECORDTYPE

IF COL_LENGTH(@TABLENAME,'X02_UDMH_EXCEPTION') IS NOT NULL
BEGIN
/* INSERTING THE DATA FROM BASE QUERY VIEW TO XML EXCEPTION */
SET @SQL='INSERT INTO TB_UDMH_XML_EXCEPTION (X02_UDMH_EXCEPTION
                    ,EXCEPT_TARGETTYPE)
          SELECT X02_UDMH_EXCEPTION
                ,'''+ @RECORDTYPE +'''               
            FROM VW_'+ @RECORDTYPE + 
                ' WHERE X02_UDMH_EXCEPTION IS NOT NULL'
EXEC (@SQL)
END
END

GO



IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_AUDIT_INSERT]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_AUDIT_INSERT]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_AUDIT_INSERT]
@LOGCOMPONENT VARCHAR(50),
@LOGMESSAGE VARCHAR(MAX)

AS
BEGIN
-- INSERT LOG COMPONENT AND LOG MESSAGE
INSERT INTO DBO.[TB_UDMH_AUDIT] ([LOG_DATETIME],[LOG_COMPONENT],[LOG_MESSAGE]) VALUES (GETDATE(),@LOGCOMPONENT,@LOGMESSAGE)
END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_PKG_STATUS_SUCCESS]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_PKG_STATUS_SUCCESS]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_PKG_STATUS_SUCCESS]
@PACKAGENAME VARCHAR(100),
@CHUNKNUMBER VARCHAR(2) 
AS 
BEGIN

	UPDATE DBO.[TB_UDMH_TST]
	SET [LOAD_STATUS] = 'COMPLETED',
	EXECUTION_DATE = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNK_NUMBER = @CHUNKNUMBER ;

	UPDATE DBO.[TB_UDMH_LOADQUEUE]
	SET [STATUS] = 'MODULELOADED'  
	WHERE [SSIS_PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNKNUMBER = @CHUNKNUMBER
		
	UPDATE DBO.[TB_UDMH_SDMT]
	SET [SOURCE_LOAD_STATUS] = 'SRCDATALOADED'  , SOURCE_RECEIVED_DATETIME = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 
		
	
END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_PKG_STATUS_FAILURE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_PKG_STATUS_FAILURE]
GO
CREATE PROCEDURE PR_UDMH_PKG_STATUS_FAILURE
@PACKAGENAME VARCHAR(100),
@CHUNKNUMBER VARCHAR(2)

AS 
BEGIN

	UPDATE DBO.[TB_UDMH_TST]
	SET [LOAD_STATUS] = 'MODULEUPLOADFAILED',
	EXECUTION_DATE = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNK_NUMBER = @CHUNKNUMBER ;

	UPDATE DBO.[TB_UDMH_LOADQUEUE]
	SET [STATUS] = 'MODULEUPLOADFAILED'  
	WHERE [SSIS_PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNKNUMBER = @CHUNKNUMBER
 
 	UPDATE DBO.[TB_UDMH_SDMT]
	SET [SOURCE_LOAD_STATUS] = 'SRCDATAUPLOADFAILED'  , SOURCE_RECEIVED_DATETIME = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 
END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_PKG_STATUS_INPROGRESS]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_PKG_STATUS_INPROGRESS]
GO
CREATE PROCEDURE PR_UDMH_PKG_STATUS_INPROGRESS
@PACKAGENAME VARCHAR(100),
@CHUNKNUMBER VARCHAR(2)
AS 
BEGIN

	UPDATE DBO.[TB_UDMH_TST]
	SET [LOAD_STATUS] = 'INPROGRESS',
	EXECUTION_DATE = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNK_NUMBER = @CHUNKNUMBER ;

	UPDATE DBO.[TB_UDMH_LOADQUEUE]
	SET [STATUS] = 'LOADINPROGRESS'  
	WHERE [SSIS_PACKAGE_NAME] = @PACKAGENAME 
	AND CHUNKNUMBER = @CHUNKNUMBER

	UPDATE DBO.[TB_UDMH_SDMT]
	SET [SOURCE_LOAD_STATUS] = 'LOADINPROGRESS'  , SOURCE_RECEIVED_DATETIME = GETDATE()
	WHERE [PACKAGE_NAME] = @PACKAGENAME 

END

GO

IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_DELETE]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_DELETE]
GO

CREATE PROCEDURE [dbo].[PR_UDMH_DELETE] 
(
  @RECORDTYPE AS VARCHAR(100)
  --SET @RECORDTYPE = 'TB_SRC_AC01'
)
AS
BEGIN
IF (@RECORDTYPE LIKE ('%X02%'))
  BEGIN
    BEGIN
         IF EXISTS (SELECT 1 FROM TB_UDMH_X02 WITH (NOLOCK)
                WHERE       RECORDTYPE = @RECORDTYPE) 
       /*DELETE RECORDS FROM X02 TABLE*/
         DELETE FROM TB_UDMH_X02
         WHERE RECORDTYPE = @RECORDTYPE         
    END 

       BEGIN
          DECLARE @SQL AS VARCHAR(100)
          SELECT @SQL = 'TRUNCATE TABLE TB_' + @RECORDTYPE 
          EXEC (@SQL)
       END

   BEGIN
   IF EXISTS (SELECT 1 FROM TB_UDMH_EXCEPTION WHERE EXCEPT_PACKAGE=@RECORDTYPE)
       BEGIN
               DELETE FROM TB_UDMH_EXCEPTION 
                   WHERE EXCEPT_PACKAGE=@RECORDTYPE
                   DBCC CHECKIDENT ('TB_UDMH_EXCEPTION', RESEED, 1)  
       END 
   END
  BEGIN
   IF EXISTS (SELECT 1 FROM TB_UDMH_XML_EXCEPTION WITH (NOLOCK)
                WHERE       EXCEPT_TARGETTYPE = @RECORDTYPE) 
       DELETE FROM TB_UDMH_XML_EXCEPTION 
             WHERE EXCEPT_TARGETTYPE=@RECORDTYPE
  END 
END

      
IF (@RECORDTYPE LIKE ('%SRC%'))
     BEGIN
       DECLARE @srcRecordType AS VARCHAR(100)
       SELECT @srcRecordType = right(@RECORDTYPE, len(@RECORDTYPE) - charindex('_', @RECORDTYPE) - 4)
     
       SELECT @SQL = 'TRUNCATE TABLE TB_SRC_' +  @srcRecordType
       EXEC (@SQL)
     END

  BEGIN
    IF EXISTS (SELECT 1 FROM TB_UDMH_EXCEPTION WHERE EXCEPT_PACKAGE=@srcRecordType)
       BEGIN
                DELETE FROM TB_UDMH_EXCEPTION 
                  WHERE EXCEPT_PACKAGE=@srcRecordType
                  DBCC CHECKIDENT ('TB_UDMH_EXCEPTION', RESEED, 1)  
       END 
              
   END                   
/*DELETE RECORDS FROM EXCEPTION_SYSTEM TABLE*/  
  BEGIN
    IF EXISTS (SELECT 1 FROM TB_UDMH_EXCEPTION_SYSTEM WITH (NOLOCK)
                           WHERE [EXCEPT_TARGETTYPE]= @RECORDTYPE)   
    BEGIN 
           DELETE FROM TB_UDMH_EXCEPTION_SYSTEM
                    WHERE [EXCEPT_TARGETTYPE]   = @RECORDTYPE 
    END

  END       
  
END
GO



IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[PR_UDMH_TSA_INSERT_CHECKSUM]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[PR_UDMH_TSA_INSERT_CHECKSUM]
GO
CREATE PROCEDURE [DBO].[PR_UDMH_TSA_INSERT_CHECKSUM]   
	 @TRANCHENUMBER VARCHAR(2),  
	 @CHUNKNUMBER VARCHAR(3), 
	 @CHECKSUM AS VARCHAR(250),
	 @FILENAME AS VARCHAR(250),
	 @SERVERNAMENODE2 AS VARCHAR(40),
	 @SERVERNAMENODE3 AS VARCHAR(40),
	 @DATABASENODE2 AS VARCHAR(30),
	 @DATABASENODE3 AS VARCHAR(30),
	 @X02SASACK INT OUTPUT
  
AS  
BEGIN  
 SET @X02SASACK=1
	 DECLARE @STRQUERYNODE2 AS VARCHAR(MAX)
	 DECLARE @STRQUERYNODE3 AS VARCHAR(MAX)
	 DECLARE @SERVERNODE2 AS VARCHAR(40)
	 DECLARE @SERVERNODE3 AS VARCHAR(40)
	 SET @SERVERNODE2 = REPLACE(REPLACE(@SERVERNAMENODE2 ,'[',''),']','') 
     SET @SERVERNODE3 = REPLACE(REPLACE(@SERVERNAMENODE3 ,'[',''),']','') 
	 
	 DELETE FROM TB_UDMH_CHECKSUM WHERE TRANCHENUMBER = ''+@TRANCHENUMBER +'' AND CHUNKNUMBER = ''+ @CHUNKNUMBER 	+'' AND [CHECKSUM] = ''+@CHECKSUM + '' AND [SOURCENAME] = ''+@FILENAME +'' 
		INSERT INTO [DBO].TB_UDMH_CHECKSUM ([MACHINENAME], [TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],[CHECKSUM] ,[CHECKSUMCREATEDATE]) VALUES   ((SELECT HOST_NAME()), ''+ @TRANCHENUMBER +'',''+ @CHUNKNUMBER+'',''+@FILENAME+'',''+@CHECKSUM+'',(SELECT GETDATE())) 		            
 SET @STRQUERYNODE2 ='
		IF EXISTS(SELECT [SERVER_ID] FROM SYS.SERVERS WHERE [NAME] = '''+@SERVERNODE2 + ''')
		BEGIN
			DELETE FROM '+ @SERVERNAMENODE2 +'.' + @DATABASENODE2 + '.[DBO].TB_UDMH_CHECKSUM  WHERE TRANCHENUMBER= '''+@TRANCHENUMBER + ''' AND CHUNKNUMBER= '''+ @CHUNKNUMBER +''' AND [CHECKSUM]= '''+ @CHECKSUM + ''' AND [SOURCENAME] = ''' +@FILENAME +'''
			INSERT INTO '+@SERVERNAMENODE2+'.' +@DATABASENODE2 + '.[DBO].TB_UDMH_CHECKSUM ([MACHINENAME], [TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],[CHECKSUM] ,[CHECKSUMCREATEDATE]) 
			VALUES   ((SELECT HOST_NAME()), '''+ @TRANCHENUMBER+''',''' + @CHUNKNUMBER+''',''' +@FILENAME+''','''+@CHECKSUM +''',(SELECT GETDATE())) 		            
		END'
	SET @STRQUERYNODE3 ='	
		IF EXISTS(SELECT [SERVER_ID] FROM SYS.SERVERS WHERE [NAME] = ''' +@SERVERNODE3 + ''')
		BEGIN
			DELETE FROM '+ @SERVERNAMENODE3 +'.' + @DATABASENODE3 + '.[DBO].TB_UDMH_CHECKSUM  WHERE TRANCHENUMBER= '''+@TRANCHENUMBER + ''' AND CHUNKNUMBER= '''+ @CHUNKNUMBER +''' AND [CHECKSUM]= '''+ @CHECKSUM + ''' AND [SOURCENAME] = ''' +@FILENAME +'''
			INSERT INTO '+@SERVERNAMENODE3+'.' +@DATABASENODE3 + '.[DBO].TB_UDMH_CHECKSUM ([MACHINENAME], [TRANCHENUMBER],[CHUNKNUMBER],[SOURCENAME],[CHECKSUM] ,[CHECKSUMCREATEDATE]) 
			VALUES   ((SELECT HOST_NAME()), '''+ @TRANCHENUMBER+''',''' + @CHUNKNUMBER+''',''' +@FILENAME+''',''' +@CHECKSUM +''',(SELECT GETDATE())) 		            
		END'
	-- PRINT @STRQUERYNODE2
	-- PRINT @STRQUERYNODE3
	  BEGIN TRY
         EXECUTE (@STRQUERYNODE2)         
	  END TRY
		BEGIN CATCH
			SET @X02SASACK=2
		END CATCH
		
		BEGIN TRY
         EXECUTE (@STRQUERYNODE3)         
	    END TRY
		BEGIN CATCH
			SET @X02SASACK=3
		END CATCH
	END 

	GO
--**********************************
--		END  OF SCRIPTS     
--**********************************